@page "/background.html"
@inherits BackgroundPage
@inject IScriptWrapper Scripts
@inject IChessDotComWatcher ChessDotComWatcher
@inject ILogger<Background> Logging
@inject ICherubConnectionManager CherubConnection
@using DgtAngel.Services
@using DgtAngelShared.Json
@using Microsoft.Extensions.Logging
@using WebExtensions.Net.Tabs
@using System.Threading


<div>
    @foreach (var item in Enum.GetValues(typeof(ScriptWrapper.AudioClip)))
    {
        <audio preload="auto" type="audio/wav" id="@(Scripts.GetAudioFileId((ScriptWrapper.AudioClip)item))" src="@(Scripts.GetAudioFileSrc((ScriptWrapper.AudioClip)item))" autostart="false"></audio>
    }
</div>

@code {

    Task pollChessDotComBoardTask = null;
    CancellationTokenSource canxSrcChessDotComBoardPoll = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Logging.LogInformation($"Starting....");
        await Scripts.AddIndexToContextMenu();
        Logging.LogInformation($"Context Menu Item Added");

        #pragma warning disable CS4014 // This functions does not return without cancelation - NEVER AWAIT IT!
        CherubConnection.StartCherubConnection();
        #pragma warning restore CS4014

        await CherubConnection.SendMessageToCherubClient($"DGT Angel is starting...");

        ChessDotComWatcher.OnWatchStarted += async (obj, eventArgs) =>
                            {
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_WATCHING);
                                await CherubConnection.SendMessageToCherubClient($"Angel is watching a board on Chess.com");
                            };

        ChessDotComWatcher.OnWatchStopped += async (obj, eventArgs) =>
                            {
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_NOTWATCHING);
                                await CherubConnection.SendMessageToCherubClient($"Angel has stopped watching a board on Chess.com");                                          
                                await CherubConnection.SendDgtAngelDisconnectedToCherubClient();
                            };

        ChessDotComWatcher.OnFenRecieved += async (obj, eventArgs) =>
                            {
                                await CherubConnection.SendUpdatedBoardStateToCherubClient(eventArgs.RemoteBoardState);
                            };


        //Run the Chess.Com Watcher
#pragma warning disable CS4014 // This functions does not return without cancelation - NEVER AWAIT IT!
        canxSrcChessDotComBoardPoll = new CancellationTokenSource();
        pollChessDotComBoardTask = ChessDotComWatcher.PollChessDotComBoard(canxSrcChessDotComBoardPoll.Token);
#pragma warning restore CS4014

        await CherubConnection.SendMessageToCherubClient($"DGT Angel is running");
    }
}
