@page "/background.html"
@inherits BackgroundPage
@inject IScriptWrapper Scripts
@inject IAppData AppDataService
@inject IChessDotComWatcher ChessDotComWatcher
@inject IChessDotComHelpers ChessDotComHelpers
@inject IDgtLiveChess DgtLiveChess
@using DgtAngel.Services
@using WebExtensions.Net.Tabs
@using DgtAngelLib
@using System.Threading

<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.MISMATCH))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.MISMATCH))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.MATCH))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.MATCH))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.DGT_LC_CONNECTED))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.DGT_LC_CONNECTED))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.DGT_LC_DISCONNECTED))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.DGT_LC_DISCONNECTED))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.DGT_CONNECTED))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.DGT_CONNECTED))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.DGT_DISCONNECTED))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.DGT_DISCONNECTED))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.CDC_WATCHING))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.CDC_WATCHING))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.CDC_NOTWATCHING))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.CDC_NOTWATCHING))" autostart="false"></audio>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Starting....");
        await Scripts.AddIndexToContextMenu();
        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Context Menu Item Added");

        Task pollChessDotComBoardTask = null;
        CancellationTokenSource canxSrcChessDotComBoardPoll = null;
        bool hasOnLiveChessConnectedPlayedSinceLastConnection = true; //Set to true so audio does not play on startup


        DgtLiveChess.OnLiveChessConnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_LC_CONNECTED);

#pragma warning disable CS4014 // This functions does not return without cancelation - NEVER AWAIT
                                canxSrcChessDotComBoardPoll = new CancellationTokenSource();
                                pollChessDotComBoardTask = ChessDotComWatcher.PollChessDotComBoard(canxSrcChessDotComBoardPoll.Token);
                                hasOnLiveChessConnectedPlayedSinceLastConnection = false;
#pragma warning restore CS4014
                            };

        DgtLiveChess.OnLiveChessDisconnected += async (obj, eventArgs) =>
                            {
                                //Only play/log if we were previously connected
                                if (!hasOnLiveChessConnectedPlayedSinceLastConnection)
                                {
                                    await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                    await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_LC_DISCONNECTED);
                                    await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Trying to connect to Live Chess");
                                    hasOnLiveChessConnectedPlayedSinceLastConnection = true;
                                }

                                    canxSrcChessDotComBoardPoll?.Cancel();
                            };

        DgtLiveChess.OnBoardConnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Connected/icon-48.png" });
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_CONNECTED);
                            };

        DgtLiveChess.OnBoardDisconnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Default/icon-48.png" });
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_DISCONNECTED);
                            };

        DgtLiveChess.OnResponseRecieved += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                            };

        AppDataService.OnChange += async () =>
                            {
                                //await Scripts.WriteToConsole(ScriptWrapper.LogLevel.DEBUG, "AppData", $"{AppDataService.Age}");
                            };

        ChessDotComWatcher.OnWatchStarted += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Watching the https://www.chess.com/live tab has started");
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_WATCHING);
                            };

        ChessDotComWatcher.OnWatchStopped += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Watching the https://www.chess.com/live tab has stopped");
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_NOTWATCHING);
                            };

        ChessDotComWatcher.OnFenRecieved += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"{eventArgs.FenString}");
                            };


#pragma warning disable CS4014 // These functions do not return - NEVER AWAIT
        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Trying to connect to Live Chess (Startup)");
        DgtLiveChess.PollDgtBoard();
#pragma warning restore CS4014

    }
}
