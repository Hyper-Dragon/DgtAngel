@page "/background.html"
@inherits BackgroundPage
@inject ScriptWrapper Scripts
@inject Services.AppData AppData
@inject Services.ChessDotComWatcher ChessDotComWatcher
@using DgtAngel.Services
@using WebExtensions.Net.Tabs
@using DgtAngelLib

<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.MISMATCH))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.MISMATCH))" autostart="false"></audio>


@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // this opens index.html in the extension as a new tab when the background page is loaded
        //var extensionUrl = await WebExtensions.Runtime.GetURL("index.html");
        //await WebExtensions.Tabs.Create(new CreateProperties
        //{
        //    Url = extensionUrl
        //});

        var helpers = new ChessDotComHelpers();
        var dgtLiveChess = new DgtLiveChess();

        dgtLiveChess.OnConnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "DGT BOARD", $"{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Connected/icon-48.png" });
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.MISMATCH);
                            };

        dgtLiveChess.OnDisconnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "DGT BOARD", $"{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Default/icon-48.png" });
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.MISMATCH);
                            };

        dgtLiveChess.OnResponseRecieved += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.WARN, "DGT BOARD", $"{eventArgs.ResponseOut}");
                            };

        AppData.OnChange += async () =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.DEBUG, "AppData", $"{AppData.Age}");
                            };


        await ChessDotComWatcher.Testonlydelme();

#pragma warning disable CS4014 // This function does not return - NEVER AWAIT
        dgtLiveChess.PollDgtBoard();
#pragma warning restore CS4014


        for (; ; )
        {
            await Scripts.WriteToConsole(ScriptWrapper.LogLevel.DEBUG, "Background", $"Background loop {AppData.Age}");

            var chessDotComBoardString = await Scripts.GetChessDotComBoardString();
            await Scripts.WriteToConsole(ScriptWrapper.LogLevel.DEBUG, "Background", $"Background loop Result is {chessDotComBoardString}");

            //0:05.8|0:07.8|bk35,wb56,wk77
            if (chessDotComBoardString != "-")
            {
                try
                {
                    string fen = helpers.ConvertHtmlToFenT2(chessDotComBoardString);
                    await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "Background", $"ChessDotCom Fen is {fen}");
                }
                catch (Exception ex)
                {
                    await Scripts.WriteToConsole(ScriptWrapper.LogLevel.ERR, "Background", $"ChessDotCom Fen is unavailable [{ex.Message}]");
                }
            }

            await Task.Delay(2000);

            AppData.Age += 1;
        }
    }
}
