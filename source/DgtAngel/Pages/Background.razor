@page "/background.html"
@inherits BackgroundPage
@inject IScriptWrapper Scripts
@inject IChessDotComWatcher ChessDotComWatcher
@inject IChessDotComHelperService ChessDotComHelpers
@inject ILogger<Background> Logging
@inject HttpClient WebClient
@using DgtAngel.Services
@using Microsoft.Extensions.Logging
@using WebExtensions.Net.Tabs
@using System.Threading
@using System.Web

<div>
    @foreach (var item in Enum.GetValues(typeof(ScriptWrapper.AudioClip)))
    {
        <audio preload="auto" type="audio/wav" id="@(Scripts.GetAudioFileId((ScriptWrapper.AudioClip)item))" src="@(Scripts.GetAudioFileSrc((ScriptWrapper.AudioClip)item))" autostart="false"></audio>
    }
</div>

@code {
    const string CHERUB_API_HOST = "http://localhost:37964";
    const string CHERUB_API_PATH = "api/DgtBoard";
    const string CHERUB_SEND_USER_MESSAGE = "MessageUser";
    const string CHERUB_SEND_CLOCK_MESSAGE = "SetClock";
    const string CHERUB_SEND_LOCAL_BOARD_FEN = "SetLocalBoardFenString";
    const string CHERUB_SEND_CDC_FEN = "SetChessDotComFenString";
    const string CHERUB_SENDER_NAME = "ANGEL";

    Task pollChessDotComBoardTask = null;
    CancellationTokenSource canxSrcChessDotComBoardPoll = null;


    // These method are fire and forget - if Cherub isn't there that's fine
    protected async Task SendMessageToCherubClient(string message)
    {
        Logging.LogInformation($"Sending message {message} to Cherub");
        await WebClient.SendAsync(new HttpRequestMessage() { RequestUri = new Uri($"{CHERUB_API_HOST}/{CHERUB_API_PATH}/{CHERUB_SEND_USER_MESSAGE}/{CHERUB_SENDER_NAME}/?message={HttpUtility.UrlEncode(message)}") });
    }

    protected async Task SendUpdatedFenToCherubClient(string fen, bool isForLocalBoard)
    {
        Logging.LogInformation($"Sending FEN {fen} to Cherub");
        await WebClient.SendAsync(new HttpRequestMessage() { RequestUri = new Uri($"{CHERUB_API_HOST}/{CHERUB_API_PATH}/{((isForLocalBoard) ? CHERUB_SEND_LOCAL_BOARD_FEN : CHERUB_SEND_CDC_FEN)}/{CHERUB_SENDER_NAME}/?fen={HttpUtility.UrlEncode(fen)}") });
    }

    protected async Task SendUpdatedClockToCherubClient(string whiteTime, string blackTime, int runWho)
    {
        Logging.LogInformation($"Sending clock {whiteTime} {blackTime} {runWho} to Chetub");
        await WebClient.SendAsync(new HttpRequestMessage() { RequestUri = new Uri($"{CHERUB_API_HOST}/{CHERUB_API_PATH}/{CHERUB_SEND_CLOCK_MESSAGE}/{whiteTime}/{blackTime}/{runWho.ToString()}") });
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Logging.LogInformation($"Starting....");
        await Scripts.AddIndexToContextMenu();

        Logging.LogInformation($"Context Menu Item Added");
        await SendMessageToCherubClient($"DGT Angel is starting...");


        ChessDotComWatcher.OnWatchStarted += async (obj, eventArgs) =>
                            {
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_WATCHING);

                                Logging.LogInformation($"Watching a board on Chess.com");
                                await SendMessageToCherubClient($"Angel is watching a board on Chess.com");
                            };

        ChessDotComWatcher.OnWatchStopped += async (obj, eventArgs) =>
                            {
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_NOTWATCHING);

                                Logging.LogInformation($"Stopped watching a board on Chess.com");
                                await SendMessageToCherubClient($"Angel has stopped watching a board on Chess.com");

                                await SendUpdatedClockToCherubClient("0:00:00", "0:00:00", 0);
                                await SendUpdatedFenToCherubClient("8/8/8/8/8/8/8/8", false);
                            };


        ChessDotComWatcher.OnFenRecieved += async (obj, eventArgs) =>
                            {
                                Logging.LogInformation($"OnFenRecieved Event fired");

                                var toMoveInt = eventArgs.ToMove switch
                                {
                                    "white" => 1,
                                    "black" => 2,
                                    _ => 0
                                };

                                await SendUpdatedClockToCherubClient(eventArgs.WhiteClock, eventArgs.BlackClock, toMoveInt);
                                await SendUpdatedFenToCherubClient($"{eventArgs.FenString}", false);
                            };


        //Run the Chess.Com Watcher
#pragma warning disable CS4014 // This functions does not return without cancelation - NEVER AWAIT IT!
        canxSrcChessDotComBoardPoll = new CancellationTokenSource();
        pollChessDotComBoardTask = ChessDotComWatcher.PollChessDotComBoard(canxSrcChessDotComBoardPoll.Token);
#pragma warning restore CS4014

        await SendMessageToCherubClient($"DGT Angel is running");
    }
}
