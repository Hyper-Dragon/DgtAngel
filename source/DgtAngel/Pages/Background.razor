@page "/background.html"
@inherits BackgroundPage
@inject IScriptWrapper Scripts
@inject IAppData AppDataService
@inject IChessDotComWatcher ChessDotComWatcher
@inject IChessDotComHelpers ChessDotComHelpers
@inject IDgtLiveChess DgtLiveChess
@inject HttpClient WebClient
@using DgtAngel.Services
@using WebExtensions.Net.Tabs
@using DgtAngelLib
@using System.Threading
@using System.Web

<div>
@foreach(var item in Enum.GetValues(typeof(ScriptWrapper.AudioClip)))
    {
        <audio preload="auto" type="audio/wav" id="@(Scripts.GetAudioFileId((ScriptWrapper.AudioClip)item))" src="@(Scripts.GetAudioFileSrc((ScriptWrapper.AudioClip)item))" autostart="false"></audio>
    }
</div>

@code {
    const string CHERUB_API_HOST = "http://localhost:37964";
    const string CHERUB_API_PATH = "api/DgtBoard";
    const string CHERUB_SEND_USER_MESSAGE = "MessageUser";
    const string CHERUB_SEND_CLOCK_MESSAGE = "SetClock";
    const string CHERUB_SEND_LOCAL_BOARD_FEN = "SetLocalBoardFenString";
    const string CHERUB_SEND_CDC_FEN = "SetChessDotComFenString";
    const string CHERUB_SENDER_NAME = "ANGEL";

    protected async Task SendMessageToCherubClient(string message)
    {
        // This is fire and forget - if cherub isn't there that's fine (no outbound dependency)
        await WebClient.SendAsync(new HttpRequestMessage() { RequestUri = new Uri($"{CHERUB_API_HOST}/{CHERUB_API_PATH}/{CHERUB_SEND_USER_MESSAGE}/{CHERUB_SENDER_NAME}/?message={HttpUtility.UrlEncode(message)}") }); 
    }

    protected async Task SendUpdatedFenToCherubClient(string fen, bool isForLocalBoard)
    {
        // This is fire and forget - if cherub isn't there that's fine (no outbound dependency)
        await WebClient.SendAsync(new HttpRequestMessage() { RequestUri = new Uri($"{CHERUB_API_HOST}/{CHERUB_API_PATH}/{((isForLocalBoard)?CHERUB_SEND_LOCAL_BOARD_FEN:CHERUB_SEND_CDC_FEN)}/{CHERUB_SENDER_NAME}/?fen={HttpUtility.UrlEncode(fen)}") }); 
    }

    protected async Task SendMessageToClock(string whiteTime, string blackTime, int runWho)
    {
        // This is fire and forget - if cherub isn't there that's fine (no outbound dependency)
        await WebClient.SendAsync(new HttpRequestMessage() { RequestUri = new Uri($"{CHERUB_API_HOST}/{CHERUB_API_PATH}/{CHERUB_SEND_CLOCK_MESSAGE}/{whiteTime}/{blackTime}/{runWho.ToString()}") });
    }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Starting....");
        await Scripts.AddIndexToContextMenu();
        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Context Menu Item Added");

        Task pollChessDotComBoardTask = null;
        CancellationTokenSource canxSrcChessDotComBoardPoll = null;
        bool hasOnLiveChessConnectedPlayedSinceLastConnection = true; //Set to true so audio does not play on startup


        DgtLiveChess.OnLiveChessConnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                await SendMessageToCherubClient("DGT Angel is CONNECTED to the Live Chess Software");   
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_LC_CONNECTED);
                            };

        DgtLiveChess.OnLiveChessDisconnected += async (obj, eventArgs) =>
                            {
                                //Only play/log if we were previously connected
                                if (!hasOnLiveChessConnectedPlayedSinceLastConnection)
                                {
                                    await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                    await SendMessageToCherubClient("DGT Angel is DISCONNECTED from the Live Chess Software...trying to reconnect");  
                                    await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_LC_DISCONNECTED);
                                    await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Trying to connect to Live Chess");
                                    hasOnLiveChessConnectedPlayedSinceLastConnection = true;
                                }                                    
                            };

        DgtLiveChess.OnBoardConnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Connected/icon-48.png" });
                                
                                await SendMessageToCherubClient($"DGT Angel has CONNECTED to the board"); 
                                
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_CONNECTED);

                                //Run the Chess.Com Watcher
                                #pragma warning disable CS4014 // This functions does not return without cancelation - NEVER AWAIT
                                canxSrcChessDotComBoardPoll = new CancellationTokenSource();
                                pollChessDotComBoardTask = ChessDotComWatcher.PollChessDotComBoard(canxSrcChessDotComBoardPoll.Token);
                                hasOnLiveChessConnectedPlayedSinceLastConnection = false;
                                #pragma warning restore CS4014
                            };

        DgtLiveChess.OnBoardDisconnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Default/icon-48.png" });
                               
                                await SendMessageToCherubClient($"DGT Angel has DISCONNECTED from the board"); 
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_DISCONNECTED);

                                //Stop the Chess.Com Watcher (if running) 
                                canxSrcChessDotComBoardPoll?.Cancel();
                            };

        DgtLiveChess.OnResponseRecieved += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"DGT_BOARD:{eventArgs.ResponseOut}");

                                await SendUpdatedFenToCherubClient($"{eventArgs.ResponseOut}",true); 

                                AppDataService.BoardFEN = eventArgs.ResponseOut;
                            };

        ChessDotComWatcher.OnFenRecieved += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.DEBUG, "BACKGROUND", $"CDC_WATCH:{eventArgs.FenString}");
                                AppDataService.ChessDotComFEN = eventArgs.FenString;
                                await SendUpdatedFenToCherubClient($"{eventArgs.FenString}",false);
                                AppDataService.SetClocks(eventArgs.WhiteClock, eventArgs.BlackClock, eventArgs.ToMove);
                            };

        ChessDotComWatcher.OnWatchStarted += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Watching the https://www.chess.com/live tab has started");
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_WATCHING);
                            };

        ChessDotComWatcher.OnWatchStopped += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Watching the https://www.chess.com/live tab has stopped");
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.CDC_NOTWATCHING);

                                await SendMessageToClock("0:00:00","0:00:00",0); 

                                AppDataService.ResetChessDotComBoardState();
                            };

        AppDataService.OnFenChange += async () =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.DEBUG, "BACKGROUND", $"APP_DATA: Matching {AppDataService.ChessDotComFEN} {AppDataService.BoardFEN}");

                                if (AppDataService.IsChessDotComBoardStateActive && AppDataService.ChessDotComFEN != AppDataService.BoardFEN)
                                {
                                    //Give time to move the pieces in sync...
                                    await Task.Delay(2000);

                                    //...then test again
                                    if (AppDataService.IsChessDotComBoardStateActive && AppDataService.ChessDotComFEN != AppDataService.BoardFEN)
                                    {
                                        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"APP_DATA: Mismatch detected...Boards are not in sync");
                                        await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.MISMATCH);
                                    }
                                    else
                                    {
                                        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"APP_DATA: The boards are in sync");
                                        await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.MATCH);
                                    }
                                }
                                else
                                {
                                    await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"APP_DATA: The boards are in sync");
                                    await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.MATCH);
                                }
                            };

                            

        AppDataService.OnClockChange += async () =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"APP_DATA: White Clock {AppDataService.WhiteClock} Black Clock {AppDataService.BlackClock} To Move {AppDataService.ToMove}");

                                var ws = AppDataService.WhiteClock.Split(".")[0].Split(":");
                                var bc = AppDataService.BlackClock.Split(".")[0].Split(":");

                                string wcout = $"0:{ws[0].PadLeft(2,'0')}:{ws[1].PadLeft(2,'0')}";
                                string bcout = $"0:{bc[0].PadLeft(2,'0')}:{bc[1].PadLeft(2,'0')}";
                                string toMove = ((AppDataService.ToMove.ToUpper() == "W") ? "1" : ((AppDataService.ToMove.ToUpper() == "B")?"2":"0"));

                                await WebClient.SendAsync(new HttpRequestMessage() { RequestUri = new Uri($"http://localhost:37964/api/DgtBoard/SetClock/{wcout}/{bcout}/{toMove}")});
                                
                                
                               /*
                                using var client = new System.Net.Sockets.TcpClient("localhost", 13000);
                                var netStream = client.GetStream();
                                var txtstream = new System.IO.StreamWriter(netStream);
                                await txtstream.WriteLineAsync($"TXT,{AppDataService.WhiteClock}");
                                await txtstream.WriteLineAsync($"QUIT");
                                */

                            };


#pragma warning disable CS4014 // This function does not return - NEVER AWAIT
        await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "BACKGROUND", $"Trying to connect to Live Chess (Startup)");
        DgtLiveChess.PollDgtBoard();
#pragma warning restore CS4014

    }
}
