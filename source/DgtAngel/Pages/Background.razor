@page "/background.html"
@inherits BackgroundPage
@inject IJSRuntime JS
@inject Services.AppData AppData
@using WebExtensions.Net.Tabs
@using DgtAngelLib

<audio id="audio-mismatch" src="Audio/Mismatch.wav" autostart="false" ></audio>


@code {

    async void c_MessageRecieved(Object sender, MessageRecievedEventArgs e)
    {
        await JS.InvokeVoidAsync("writeToConsole", $"DGT {e.ResponseOut}");
    }

    async void c_AppDataOnChanged()
    {
        await JS.InvokeVoidAsync("writeToConsole", $"AppData Changed: {AppData.Age}");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // this opens index.html in the extension as a new tab when the background page is loaded
        //var extensionUrl = await WebExtensions.Runtime.GetURL("index.html");
        //await WebExtensions.Tabs.Create(new CreateProperties
        //{
        //    Url = extensionUrl
        //});

        var helpers = new ChessDotComHelpers();
        var dgtLiveChess = new DgtLiveChess();

        dgtLiveChess.ResponseRecieved += c_MessageRecieved;
        AppData.OnChange += c_AppDataOnChanged;

        //never await this
        dgtLiveChess.Connect();

        await JS.InvokeVoidAsync("playAudioFromBkg", $"audio-mismatch");


        await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Connected/icon-48.png" });

        for (; ; )
        {
            await JS.InvokeVoidAsync("writeToConsole", $"Background loop {AppData.Age}");

            var interopResult = await JS.InvokeAsync<string>("getPiecesHtml");
            //await JS.InvokeVoidAsync("writeToConsole",$"Result is {interopResult}");


            //0:05.8|0:07.8|bk35,wb56,wk77
            if (interopResult != "-")
            {
                try
                {
                    string fen = helpers.ConvertHtmlToFenT2(interopResult);
                    await JS.InvokeVoidAsync("writeToConsole", $"Fen is {fen}");
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("writeToConsole", $"Fen is unavailable [{ex.Message}]");
                }
            }

            await Task.Delay(2000);

            AppData.Age += 1;
        }
    }
}
