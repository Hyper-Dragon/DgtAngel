@page "/background.html"
@inherits BackgroundPage
@inject IScriptWrapper Scripts
@inject IAppData AppData
@inject IChessDotComWatcher ChessDotComWatcher
@inject IChessDotComHelpers ChessDotComHelpers
@inject IDgtLiveChess DgtLiveChess
@using DgtAngel.Services
@using WebExtensions.Net.Tabs
@using DgtAngelLib

<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.MISMATCH))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.MISMATCH))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.MATCH))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.MATCH))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.DGT_CONNECTED))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.DGT_CONNECTED))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.DGT_DISCONNECTED))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.DGT_DISCONNECTED))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.CDC_WATCHING))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.CDC_WATCHING))" autostart="false"></audio>
<audio id="@(Scripts.GetAudioFileId(ScriptWrapper.AudioClip.CDC_NOTWATCHING))" src="@(Scripts.GetAudioFileSrc(ScriptWrapper.AudioClip.CDC_NOTWATCHING))" autostart="false"></audio>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // this opens index.html in the extension as a new tab when the background page is loaded
        //var extensionUrl = await WebExtensions.Runtime.GetURL("index.html");
        //await WebExtensions.Tabs.Create(new CreateProperties
        //{
        //    Url = extensionUrl
        //});

        DgtLiveChess.OnConnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "DGT BOARD", $"{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Connected/icon-48.png" });
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_CONNECTED);
                            };

        DgtLiveChess.OnDisconnected += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.INFO, "DGT BOARD", $"{eventArgs.ResponseOut}");
                                await WebExtensions.BrowserAction.SetIcon(new WebExtensions.Net.BrowserAction.SetIconDetails() { Path = "Icons/Default/icon-48.png" });
                                await Scripts.PlayAudioFile(ScriptWrapper.AudioClip.DGT_DISCONNECTED);
                            };

        DgtLiveChess.OnResponseRecieved += async (obj, eventArgs) =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.WARN, "DGT BOARD", $"{eventArgs.ResponseOut}");
                            };

        AppData.OnChange += async () =>
                            {
                                await Scripts.WriteToConsole(ScriptWrapper.LogLevel.DEBUG, "AppData", $"{AppData.Age}");
                            };


#pragma warning disable CS4014 // These functions do not return - NEVER AWAIT
        DgtLiveChess.PollDgtBoard();
        ChessDotComWatcher.PollChessDotComBoard();
#pragma warning restore CS4014
    }
}
