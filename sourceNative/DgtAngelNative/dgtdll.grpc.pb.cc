// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dgtdll.proto

#include "dgtdll.pb.h"
#include "dgtdll.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dgt {

static const char* DGTDLL_method_names[] = {
  "/dgt.DGTDLL/GetVersion",
  "/dgt.DGTDLL/GetWxWidgetsVersion",
  "/dgt.DGTDLL/Init",
  "/dgt.DGTDLL/Exit",
  "/dgt.DGTDLL/ShowDialog",
  "/dgt.DGTDLL/HideDialog",
  "/dgt.DGTDLL/WriteCOMPort",
  "/dgt.DGTDLL/WriteCOMPortString",
  "/dgt.DGTDLL/WritePosition",
  "/dgt.DGTDLL/PlayWhiteMove",
  "/dgt.DGTDLL/PlayBlackMove",
  "/dgt.DGTDLL/WriteDebug",
  "/dgt.DGTDLL/DisplayClockMessage",
  "/dgt.DGTDLL/EndDisplay",
  "/dgt.DGTDLL/SetNRun",
  "/dgt.DGTDLL/ClockMode",
  "/dgt.DGTDLL/SetAutoRotation",
  "/dgt.DGTDLL/UseFEN",
  "/dgt.DGTDLL/UseSAN",
  "/dgt.DGTDLL/SetGameType",
  "/dgt.DGTDLL/AllowTakebacks",
  "/dgt.DGTDLL/RegisterCallbacks",
};

std::unique_ptr< DGTDLL::Stub> DGTDLL::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DGTDLL::Stub> stub(new DGTDLL::Stub(channel, options));
  return stub;
}

DGTDLL::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVersion_(DGTDLL_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWxWidgetsVersion_(DGTDLL_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(DGTDLL_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exit_(DGTDLL_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowDialog_(DGTDLL_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HideDialog_(DGTDLL_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteCOMPort_(DGTDLL_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteCOMPortString_(DGTDLL_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WritePosition_(DGTDLL_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayWhiteMove_(DGTDLL_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayBlackMove_(DGTDLL_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteDebug_(DGTDLL_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisplayClockMessage_(DGTDLL_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndDisplay_(DGTDLL_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNRun_(DGTDLL_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClockMode_(DGTDLL_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAutoRotation_(DGTDLL_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UseFEN_(DGTDLL_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UseSAN_(DGTDLL_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGameType_(DGTDLL_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllowTakebacks_(DGTDLL_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterCallbacks_(DGTDLL_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status DGTDLL::Stub::GetVersion(::grpc::ClientContext* context, const ::dgt::Empty& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void DGTDLL::Stub::async::GetVersion(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::GetVersion(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::GetWxWidgetsVersion(::grpc::ClientContext* context, const ::dgt::Empty& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWxWidgetsVersion_, context, request, response);
}

void DGTDLL::Stub::async::GetWxWidgetsVersion(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWxWidgetsVersion_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::GetWxWidgetsVersion(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWxWidgetsVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncGetWxWidgetsVersionRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWxWidgetsVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncGetWxWidgetsVersionRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWxWidgetsVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::Init(::grpc::ClientContext* context, const ::dgt::Empty& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void DGTDLL::Stub::async::Init(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::Init(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::Exit(::grpc::ClientContext* context, const ::dgt::Empty& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exit_, context, request, response);
}

void DGTDLL::Stub::async::Exit(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::Exit(::grpc::ClientContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncExitRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncExitRaw(::grpc::ClientContext* context, const ::dgt::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::ShowDialog(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShowDialog_, context, request, response);
}

void DGTDLL::Stub::async::ShowDialog(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowDialog_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::ShowDialog(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowDialog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncShowDialogRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::IntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShowDialog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncShowDialogRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowDialogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::HideDialog(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HideDialog_, context, request, response);
}

void DGTDLL::Stub::async::HideDialog(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HideDialog_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::HideDialog(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HideDialog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncHideDialogRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::IntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HideDialog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncHideDialogRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHideDialogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::WriteCOMPort(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteCOMPort_, context, request, response);
}

void DGTDLL::Stub::async::WriteCOMPort(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteCOMPort_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::WriteCOMPort(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteCOMPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncWriteCOMPortRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::IntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteCOMPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncWriteCOMPortRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteCOMPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::WriteCOMPortString(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteCOMPortString_, context, request, response);
}

void DGTDLL::Stub::async::WriteCOMPortString(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteCOMPortString_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::WriteCOMPortString(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteCOMPortString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncWriteCOMPortStringRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::StringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteCOMPortString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncWriteCOMPortStringRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteCOMPortStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::WritePosition(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WritePosition_, context, request, response);
}

void DGTDLL::Stub::async::WritePosition(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WritePosition_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::WritePosition(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WritePosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncWritePositionRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::StringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WritePosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncWritePositionRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWritePositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::PlayWhiteMove(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayWhiteMove_, context, request, response);
}

void DGTDLL::Stub::async::PlayWhiteMove(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayWhiteMove_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::PlayWhiteMove(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayWhiteMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncPlayWhiteMoveRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::StringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayWhiteMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncPlayWhiteMoveRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayWhiteMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::PlayBlackMove(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayBlackMove_, context, request, response);
}

void DGTDLL::Stub::async::PlayBlackMove(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayBlackMove_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::PlayBlackMove(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayBlackMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncPlayBlackMoveRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::StringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayBlackMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncPlayBlackMoveRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayBlackMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::WriteDebug(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteDebug_, context, request, response);
}

void DGTDLL::Stub::async::WriteDebug(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteDebug_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::WriteDebug(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteDebug_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncWriteDebugRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::BoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteDebug_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncWriteDebugRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteDebugRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::DisplayClockMessage(::grpc::ClientContext* context, const ::dgt::ClockMessageRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::ClockMessageRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisplayClockMessage_, context, request, response);
}

void DGTDLL::Stub::async::DisplayClockMessage(::grpc::ClientContext* context, const ::dgt::ClockMessageRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::ClockMessageRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisplayClockMessage_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::DisplayClockMessage(::grpc::ClientContext* context, const ::dgt::ClockMessageRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisplayClockMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncDisplayClockMessageRaw(::grpc::ClientContext* context, const ::dgt::ClockMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::ClockMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisplayClockMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncDisplayClockMessageRaw(::grpc::ClientContext* context, const ::dgt::ClockMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisplayClockMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::EndDisplay(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndDisplay_, context, request, response);
}

void DGTDLL::Stub::async::EndDisplay(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndDisplay_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::EndDisplay(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndDisplay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncEndDisplayRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::IntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndDisplay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncEndDisplayRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndDisplayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::SetNRun(::grpc::ClientContext* context, const ::dgt::SetNRunRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::SetNRunRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNRun_, context, request, response);
}

void DGTDLL::Stub::async::SetNRun(::grpc::ClientContext* context, const ::dgt::SetNRunRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::SetNRunRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNRun_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::SetNRun(::grpc::ClientContext* context, const ::dgt::SetNRunRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNRun_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncSetNRunRaw(::grpc::ClientContext* context, const ::dgt::SetNRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::SetNRunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNRun_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncSetNRunRaw(::grpc::ClientContext* context, const ::dgt::SetNRunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNRunRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::ClockMode(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClockMode_, context, request, response);
}

void DGTDLL::Stub::async::ClockMode(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClockMode_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::ClockMode(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClockMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncClockModeRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::IntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClockMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncClockModeRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClockModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::SetAutoRotation(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAutoRotation_, context, request, response);
}

void DGTDLL::Stub::async::SetAutoRotation(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAutoRotation_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::SetAutoRotation(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAutoRotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncSetAutoRotationRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::BoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAutoRotation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncSetAutoRotationRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAutoRotationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::UseFEN(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UseFEN_, context, request, response);
}

void DGTDLL::Stub::async::UseFEN(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UseFEN_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::UseFEN(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UseFEN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncUseFENRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::BoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UseFEN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncUseFENRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUseFENRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::UseSAN(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UseSAN_, context, request, response);
}

void DGTDLL::Stub::async::UseSAN(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UseSAN_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::UseSAN(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UseSAN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncUseSANRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::BoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UseSAN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncUseSANRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUseSANRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::SetGameType(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGameType_, context, request, response);
}

void DGTDLL::Stub::async::SetGameType(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGameType_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::SetGameType(::grpc::ClientContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGameType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncSetGameTypeRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::IntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGameType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncSetGameTypeRaw(::grpc::ClientContext* context, const ::dgt::IntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGameTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DGTDLL::Stub::AllowTakebacks(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::dgt::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllowTakebacks_, context, request, response);
}

void DGTDLL::Stub::async::AllowTakebacks(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllowTakebacks_, context, request, response, std::move(f));
}

void DGTDLL::Stub::async::AllowTakebacks(::grpc::ClientContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllowTakebacks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::PrepareAsyncAllowTakebacksRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgt::IntResponse, ::dgt::BoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllowTakebacks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgt::IntResponse>* DGTDLL::Stub::AsyncAllowTakebacksRaw(::grpc::ClientContext* context, const ::dgt::BoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllowTakebacksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::dgt::CallbackResponse>* DGTDLL::Stub::RegisterCallbacksRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::dgt::CallbackResponse>::Create(channel_.get(), rpcmethod_RegisterCallbacks_, context, request);
}

void DGTDLL::Stub::async::RegisterCallbacks(::grpc::ClientContext* context, const ::dgt::StringRequest* request, ::grpc::ClientReadReactor< ::dgt::CallbackResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dgt::CallbackResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterCallbacks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dgt::CallbackResponse>* DGTDLL::Stub::AsyncRegisterCallbacksRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dgt::CallbackResponse>::Create(channel_.get(), cq, rpcmethod_RegisterCallbacks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dgt::CallbackResponse>* DGTDLL::Stub::PrepareAsyncRegisterCallbacksRaw(::grpc::ClientContext* context, const ::dgt::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dgt::CallbackResponse>::Create(channel_.get(), cq, rpcmethod_RegisterCallbacks_, context, request, false, nullptr);
}

DGTDLL::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::Empty* req,
             ::dgt::IntResponse* resp) {
               return service->GetVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::Empty* req,
             ::dgt::IntResponse* resp) {
               return service->GetWxWidgetsVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::Empty* req,
             ::dgt::IntResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::Empty, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::Empty* req,
             ::dgt::IntResponse* resp) {
               return service->Exit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::IntRequest* req,
             ::dgt::IntResponse* resp) {
               return service->ShowDialog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::IntRequest* req,
             ::dgt::IntResponse* resp) {
               return service->HideDialog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::IntRequest* req,
             ::dgt::IntResponse* resp) {
               return service->WriteCOMPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::StringRequest* req,
             ::dgt::IntResponse* resp) {
               return service->WriteCOMPortString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::StringRequest* req,
             ::dgt::IntResponse* resp) {
               return service->WritePosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::StringRequest* req,
             ::dgt::IntResponse* resp) {
               return service->PlayWhiteMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::StringRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::StringRequest* req,
             ::dgt::IntResponse* resp) {
               return service->PlayBlackMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::BoolRequest* req,
             ::dgt::IntResponse* resp) {
               return service->WriteDebug(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::ClockMessageRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::ClockMessageRequest* req,
             ::dgt::IntResponse* resp) {
               return service->DisplayClockMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::IntRequest* req,
             ::dgt::IntResponse* resp) {
               return service->EndDisplay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::SetNRunRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::SetNRunRequest* req,
             ::dgt::IntResponse* resp) {
               return service->SetNRun(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::IntRequest* req,
             ::dgt::IntResponse* resp) {
               return service->ClockMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::BoolRequest* req,
             ::dgt::IntResponse* resp) {
               return service->SetAutoRotation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::BoolRequest* req,
             ::dgt::IntResponse* resp) {
               return service->UseFEN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::BoolRequest* req,
             ::dgt::IntResponse* resp) {
               return service->UseSAN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::IntRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::IntRequest* req,
             ::dgt::IntResponse* resp) {
               return service->SetGameType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DGTDLL::Service, ::dgt::BoolRequest, ::dgt::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::BoolRequest* req,
             ::dgt::IntResponse* resp) {
               return service->AllowTakebacks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DGTDLL_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DGTDLL::Service, ::dgt::StringRequest, ::dgt::CallbackResponse>(
          [](DGTDLL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgt::StringRequest* req,
             ::grpc::ServerWriter<::dgt::CallbackResponse>* writer) {
               return service->RegisterCallbacks(ctx, req, writer);
             }, this)));
}

DGTDLL::Service::~Service() {
}

::grpc::Status DGTDLL::Service::GetVersion(::grpc::ServerContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::GetWxWidgetsVersion(::grpc::ServerContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::Init(::grpc::ServerContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::Exit(::grpc::ServerContext* context, const ::dgt::Empty* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::ShowDialog(::grpc::ServerContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::HideDialog(::grpc::ServerContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::WriteCOMPort(::grpc::ServerContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::WriteCOMPortString(::grpc::ServerContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::WritePosition(::grpc::ServerContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::PlayWhiteMove(::grpc::ServerContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::PlayBlackMove(::grpc::ServerContext* context, const ::dgt::StringRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::WriteDebug(::grpc::ServerContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::DisplayClockMessage(::grpc::ServerContext* context, const ::dgt::ClockMessageRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::EndDisplay(::grpc::ServerContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::SetNRun(::grpc::ServerContext* context, const ::dgt::SetNRunRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::ClockMode(::grpc::ServerContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::SetAutoRotation(::grpc::ServerContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::UseFEN(::grpc::ServerContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::UseSAN(::grpc::ServerContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::SetGameType(::grpc::ServerContext* context, const ::dgt::IntRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::AllowTakebacks(::grpc::ServerContext* context, const ::dgt::BoolRequest* request, ::dgt::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DGTDLL::Service::RegisterCallbacks(::grpc::ServerContext* context, const ::dgt::StringRequest* request, ::grpc::ServerWriter< ::dgt::CallbackResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dgt

